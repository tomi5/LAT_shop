Index: components/localStorage.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { updateCartDisplay } from \"./cart.js\";\n\nexport function saveCartToStorage(cartItems){\n    localStorage.setItem('cart',JSON.stringify(cartItems));\n}\n\nexport function loadCartFromStorage(){\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart){\n        const cartItems = JSON.parse(savedCart);\n        updateCartDisplay(cartItems);\n        return cartItems\n    }\n    return [];\n}\n\nexport function clearCartStorage(){\n    localStorage.removeItem('cart');\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/components/localStorage.js b/components/localStorage.js
--- a/components/localStorage.js	(revision 3d297dfb43aa76b615b6bf1c6c1fb3f7423a6c77)
+++ b/components/localStorage.js	(date 1752052958375)
@@ -1,5 +1,3 @@
-import { updateCartDisplay } from "./cart.js";
-
 export function saveCartToStorage(cartItems){
     localStorage.setItem('cart',JSON.stringify(cartItems));
 }
@@ -7,9 +5,7 @@
 export function loadCartFromStorage(){
     const savedCart = localStorage.getItem('cart');
     if (savedCart){
-        const cartItems = JSON.parse(savedCart);
-        updateCartDisplay(cartItems);
-        return cartItems
+        return JSON.parse(savedCart);
     }
     return [];
 }
Index: components/cart.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {    RIGHT_COLUMN_CLASS,\n    CART_CONTAINER_CLASS,\n    CART_SUMMARY_CLASS,\n    MANUFACTURER_CONTAINER_CLASS,\n    MANUFACTURER_HEADER_CLASS,\n    MANUFACTURER_FOOTER_CLASS,\n    MANUFACTURER_CHECKBOX_CLASS,\n    GRID_ITEM_CART_CLASS,\n    LEFT_SECTION_CLASS,\n    RIGHT_SECTION_CLASS,\n    PRODUCT_NAME_CLASS,\n    PRICE_CLASS,\n    QUANTITY_CLASS,\n    PLUS_MINUS_CLASS,\n    PLUS_MINUS_BTN_CONTAINER,\n    PLUS_MINUS_BTN,\n    ITEM_CHECKBOX_CLASS,\n    QUANTITY_PLUS_CLASS,\n    QUANTITY_MINUS_CLASS,\n    REMOVE_ITEM_CLASS,\n    BUTTON_ADD_MIN_SMALLER,\n    BUTTON_ADD_MIN,\n    MANUFACTURER_CONTAINER_SELECTOR,\n    ITEM_CHECKBOX_SELECTOR,\n    MANUFACTURER_CHECKBOX_SELECTOR,\n    MANUFACTURER_FOOTER_SELECTOR,\n    QUANTITY_PLUS_SELECTOR,\n    QUANTITY_MINUS_SELECTOR,\n    REMOVE_ITEM_SELECTOR,\n    translations,\n    CART_FOOTER_SELECTOR} from \"/cartConstants.js\"\n\nimport { saveCartToStorage,loadCartFromStorage} from \"./localStorage.js\";\n\nlet cartItems = [];\n\nexport function addToCart(product, quantity = 1) {\n    const existingItem = cartItems.find(item => item.product.added_id === product.added_id); //na id\n    \n    if (existingItem) {\n        existingItem.quantity += quantity;\n    } else {\n        cartItems.push({\n            product: product,\n            quantity: quantity\n        });\n    }\n    \n    updateCartDisplay();\n    saveCartToStorage(cartItems);\n}\n\nexport function updateCartDisplay() {\n    const rightColumn = document.querySelector(`.${RIGHT_COLUMN_CLASS}`);\n    let cartContainer = document.querySelector(`.${CART_CONTAINER_CLASS}`);\n    let cartFooter = document.querySelector(`${CART_FOOTER_SELECTOR}`);\n\n\n    if (!cartContainer) {\n        cartContainer = document.createElement('div');\n        cartContainer.className = CART_CONTAINER_CLASS;\n        rightColumn.appendChild(cartContainer);\n    }\n\n    \n    cartContainer.innerHTML = '';\n    \n    if (!cartItems.length) {\n        updateCartFooter();\n        cartContainer.innerHTML = `<p>${translations.EMPTY_CART}</p>`;\n        return;\n    }\n    \n    const manufacturers = groupItemsByManufacturer();\n\n    Object.entries(manufacturers).forEach(([manufacturer, items]) => {\n        const manufacturerSection = createManufacturerSection(manufacturer, items);\n        cartContainer.appendChild(manufacturerSection);\n    });\n\n if (!cartFooter) {\n        cartFooter = createCartFooter();\n        rightColumn.appendChild(cartFooter);\n    } else {\n        updateCartFooter();\n    }\n    \n    \n    addCartEventListeners();\n    saveCartToStorage(cartItems);\n}\n\nfunction groupItemsByManufacturer() {\n    return cartItems.reduce((acc, item) => {\n        const manufacturer = item.product.manufacturer;\n        if (!acc[manufacturer]) acc[manufacturer] = [];\n        acc[manufacturer].push(item);\n        return acc;\n    }, {});\n}\n\nfunction createManufacturerSection(manufacturer, items) {\n    const section = document.createElement('div');\n    section.className = MANUFACTURER_CONTAINER_CLASS;\n\n    const manufacturerId = `manufacturer-${manufacturer.replace(/\\s+/g, '-').toLowerCase()}`;\n    const manufacturerTotal = calculateManufacturerTotal(manufacturer, items);\n\n    const header = document.createElement('div');\n    header.className = MANUFACTURER_HEADER_CLASS;\n    header.innerHTML = `\n        <input type=\"checkbox\" id=\"${manufacturerId}\" \n               class=\"${MANUFACTURER_CHECKBOX_CLASS}\" checked />\n        <label for=\"${manufacturerId}\">${manufacturer}</label>\n        \n    `;\n    section.appendChild(header);\n\n\n    const productsContainer = document.createElement('div');\n    items.forEach((item, index) => {\n        productsContainer.appendChild(createCartItemElement(item, manufacturerId, index));\n    });\n    section.appendChild(productsContainer);\n\n\n    const footer = document.createElement('div');\n    footer.className = MANUFACTURER_FOOTER_CLASS;\n    footer.innerHTML = `Suma: ${manufacturerTotal.toFixed(2)} zł`;\n    section.appendChild(footer);\n\n\n    \n    return section;\n}\n\nfunction createCartItemElement(item, manufacturerId, index) {\n    const cartItem = document.createElement('div');\n    cartItem.className = GRID_ITEM_CART_CLASS;\n    \n    if (index >= 1) {\n        cartItem.style.paddingTop = \"10px\";\n    }\n\n    const itemId = `item-${manufacturerId}-${item.product.product_name.replace(/\\s+/g, '-').toLowerCase()}`;\n    \n    cartItem.innerHTML = `\n        <div class=\"${LEFT_SECTION_CLASS}\">\n            <div class=\"${PRODUCT_NAME_CLASS}\">\n                <input type=\"checkbox\" id=\"${itemId}\" \n                       class=\"${ITEM_CHECKBOX_CLASS}\" checked />\n                <label for=\"${itemId}\">${item.product.product_name}</label>\n            </div>\n            <div class=\"${PRICE_CLASS}\">${item.product.price.toFixed(2)} zł</div>\n            <div class=\"${QUANTITY_CLASS}\">${item.quantity}</div>\n            <div class=\"${PLUS_MINUS_CLASS}\">\n                <div class=\"${PLUS_MINUS_BTN_CONTAINER}\">\n                    <div class=\"${PLUS_MINUS_BTN}\">\n                        <button type=\"button\" class=\"${BUTTON_ADD_MIN_SMALLER} ${QUANTITY_PLUS_CLASS}\" \n                                data-product=\"${item.product.added_id}\">+</button>\n                    </div>\n                    <div class=\"${PLUS_MINUS_BTN}\">\n                        <button type=\"button\" class=\"${BUTTON_ADD_MIN_SMALLER} ${QUANTITY_MINUS_CLASS}\" \n                                data-product=\"${item.product.added_id}\">-</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"${RIGHT_SECTION_CLASS}\">\n            <button type=\"button\" class=\"${BUTTON_ADD_MIN} ${REMOVE_ITEM_CLASS}\" \n                    data-product=\"${item.product.added_id}\">-</button>\n        </div>\n    `;\n    \n    return cartItem;\n}\n\nfunction addCartEventListeners() {\n    document.querySelectorAll(QUANTITY_PLUS_SELECTOR).forEach(btn => {\n        btn.addEventListener('click', handleQuantityChange);\n    });\n    \n    document.querySelectorAll(QUANTITY_MINUS_SELECTOR).forEach(btn => {\n        btn.addEventListener('click', handleQuantityChange);\n    });\n    \n    document.querySelectorAll(REMOVE_ITEM_SELECTOR).forEach(btn => {\n        btn.addEventListener('click', handleRemoveItem);\n    });\n    \n    document.querySelectorAll(MANUFACTURER_CHECKBOX_SELECTOR).forEach(checkbox => {\n        checkbox.addEventListener('change', handleManufacturerCheckbox);\n    });\n\n    document.querySelectorAll(`${ITEM_CHECKBOX_SELECTOR}, ${MANUFACTURER_CHECKBOX_SELECTOR}`).forEach(checkbox => {\n        checkbox.addEventListener('change', handleCheckboxChange);\n    });\n\n}\n\nfunction handleQuantityChange(e) {\n    const productId = parseInt(e.target.dataset.product); \n    \n    const item = cartItems.find(item => item.product.added_id === productId );\n\n    if (item) {\n        item.quantity += e.target.classList.contains(QUANTITY_PLUS_CLASS) ? 1 : -1;\n        if (item.quantity < 1) item.quantity = 1;\n        updateCartDisplay();\n    }\n}\n\nfunction handleRemoveItem(e) {\n    const productId = parseInt(e.target.dataset.product);\n\n    cartItems = cartItems.filter(item => \n        item.product.added_id !== productId\n    );\n\n    updateCartDisplay();\n    saveCartToStorage(cartItems);\n}\n\nfunction handleManufacturerCheckbox(e) {\n    const manufacturerContainer = e.target.closest(MANUFACTURER_CONTAINER_SELECTOR);\n    const checkboxes = manufacturerContainer.querySelectorAll(ITEM_CHECKBOX_SELECTOR);\n    \n    checkboxes.forEach(checkbox => {\n        checkbox.checked = e.target.checked;\n    });\n    \n    updateTotals();\n}\n\nfunction createCartFooter() {\n    const footer = document.createElement('div');\n    footer.className = CART_SUMMARY_CLASS;\n    updateCartFooter();\n    \n    return footer;\n}\n\nfunction handleCheckboxChange() {\n    updateTotals();\n}\n\nfunction calculateManufacturerTotal(manufacturer, items) {\n    const manufacturerCheckbox = document.querySelector(`${MANUFACTURER_CHECKBOX_SELECTOR}[id=\"manufacturer-${manufacturer.replace(/\\s+/g, '-').toLowerCase()}\"]`);\n    const isManufacturerChecked = manufacturerCheckbox ? manufacturerCheckbox.checked : true;\n\n    return items.reduce((sum, item) => {\n\n        const itemCheckbox = document.querySelector(`${ITEM_CHECKBOX_SELECTOR}[id^=\"item-manufacturer-${manufacturer.replace(/\\s+/g, '-').toLowerCase()}\"]`);\n        const isItemChecked = itemCheckbox ? itemCheckbox.checked : true;\n        \n        if (isManufacturerChecked && isItemChecked) {\n            return sum + (item.product.price * item.quantity);\n        }\n        return sum;\n    }, 0);\n}\n\nfunction updateCartFooter() {\n    const cartFooter = document.querySelector(CART_FOOTER_SELECTOR);\n    if (!cartFooter) return;\n    \n    const grandTotal = calculateGrandTotal();\n    cartFooter.innerHTML = `<strong>ŁĄCZNA SUMA: ${grandTotal.toFixed(2)} zł</strong>`;\n    cartFooter.style.display = 'flex';\n\n}\n\n\nfunction calculateGrandTotal() {\n    let total = 0;\n    \n    document.querySelectorAll(MANUFACTURER_CONTAINER_SELECTOR).forEach(container => {\n        const items = Array.from(container.querySelectorAll(`.${GRID_ITEM_CART_CLASS}`))\n            .map(itemEl => {\n                return {\n                    product: {\n                        product_name: itemEl.querySelector(`.${PRODUCT_NAME_CLASS} label`).textContent,\n                        price: parseFloat(itemEl.querySelector(`.${PRICE_CLASS}`).textContent)\n                    },\n                    quantity: parseInt(itemEl.querySelector(`.${QUANTITY_CLASS}`).textContent),\n                    checked: itemEl.querySelector(ITEM_CHECKBOX_SELECTOR).checked\n                };\n            });\n        \n        const manufacturerCheckbox = container.querySelector(MANUFACTURER_CHECKBOX_SELECTOR);\n        const isManufacturerChecked = manufacturerCheckbox ? manufacturerCheckbox.checked : true;\n        \n        if (isManufacturerChecked) {\n            items.forEach(item => {\n                if (item.checked) {\n                    total += item.product.price * item.quantity;\n                }\n            });\n        }\n    });\n    \n    return total;\n}\n\nfunction updateTotals() {\n    document.querySelectorAll(MANUFACTURER_CONTAINER_SELECTOR).forEach(container => {\n    const manufacturerCheckbox = container.querySelector(MANUFACTURER_CHECKBOX_SELECTOR);\n    const isManufacturerChecked = manufacturerCheckbox.checked;\n    \n    let total = 0;\n        \n    container.querySelectorAll(`.${GRID_ITEM_CART_CLASS}`).forEach(itemEl => {\n        const itemCheckbox = itemEl.querySelector(ITEM_CHECKBOX_SELECTOR);\n        const price = parseFloat(itemEl.querySelector(`.${PRICE_CLASS}`).textContent);\n        const quantity = parseInt(itemEl.querySelector(`.${QUANTITY_CLASS}`).textContent);\n            \n        if (isManufacturerChecked && itemCheckbox.checked) {\n            total += price * quantity;\n        }\n    });\n        \n    const footer = container.querySelector(MANUFACTURER_FOOTER_SELECTOR);\n        if (footer) {\n            footer.textContent = `Suma: ${total.toFixed(2)} zł`;\n        }\n    });\n    \n    updateCartFooter();\n}\n\nexport function initCart() {\n    cartItems = loadCartFromStorage();\n    loadCartFromStorage();\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/components/cart.js b/components/cart.js
--- a/components/cart.js	(revision 3d297dfb43aa76b615b6bf1c6c1fb3f7423a6c77)
+++ b/components/cart.js	(date 1752052995075)
@@ -28,7 +28,7 @@
     QUANTITY_MINUS_SELECTOR,
     REMOVE_ITEM_SELECTOR,
     translations,
-    CART_FOOTER_SELECTOR} from "/cartConstants.js"
+    CART_FOOTER_SELECTOR} from "../cartConstants.js"
 
 import { saveCartToStorage,loadCartFromStorage} from "./localStorage.js";
 
@@ -330,5 +330,5 @@
 
 export function initCart() {
     cartItems = loadCartFromStorage();
-    loadCartFromStorage();
+    updateCartDisplay();
 }
Index: shopConstants.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Container constants\nexport const GRID_CONTAINER_SELECTOR = '.grid-container';\nexport const GRID_ITEM_CLASS = 'grid-item';\n\n// Product cell constants\nexport const PHOTO_CELL_CLASS = 'grid-item-cell-photo';\nexport const HEADER_CELL_CLASS = 'grid-item-cell-header';\nexport const PRODUCT_NAME_CLASS = 'grid-item-cell-header-productName';\nexport const MANUFACTURER_CLASS = 'grid-item-cell-header-manufacturerName';\nexport const DESCRIPTION_CLASS = 'grid-item-cell-description';\nexport const PRICE_CLASS = 'grid-item-cell-price';\nexport const QUANTITY_CLASS = 'grid-item-cell-quantity';\n\n// Quantity constants\nexport const QUANTITY_NUMBER_CLASS = 'grid-item-quantity-number';\nexport const QUANTITY_PLUS_MINUS_CLASS = 'grid-item-quantity-plusminus';\nexport const QUANTITY_BTN_CLASS = 'grid-item-quantity-plusminusBtn';\nexport const ADD_BTN_CLASS = 'grid-item-quantity-addBtn';\n\n// Input/button constants\nexport const BUTTON_ADD_MIN_CLASS = 'buttonAddMin';\nexport const ADD_TO_CART_BTN_CLASS = 'add-to-cart-btn';\nexport const QUANTITY_INPUT_CLASS = 'quantity-input';\n\n// Selectors\nexport const QUANTITY_INPUT_SELECTOR = `.${QUANTITY_INPUT_CLASS}`;\nexport const BUTTON_ADD_MIN_SELECTOR = `.${BUTTON_ADD_MIN_CLASS}`;\nexport const ADD_TO_CART_BTN_SELECTOR = `.${ADD_TO_CART_BTN_CLASS}`;\n\n// Other constants\nexport const ERROR_MESSAGE_CLASS = 'error-message';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shopConstants.js b/shopConstants.js
--- a/shopConstants.js	(revision 3d297dfb43aa76b615b6bf1c6c1fb3f7423a6c77)
+++ b/shopConstants.js	(date 1752052905548)
@@ -28,4 +28,10 @@
 export const ADD_TO_CART_BTN_SELECTOR = `.${ADD_TO_CART_BTN_CLASS}`;
 
 // Other constants
-export const ERROR_MESSAGE_CLASS = 'error-message';
\ No newline at end of file
+export const ERROR_MESSAGE_CLASS = 'error-message';
+
+export const ERROR_MESSAGES = {
+    NETWORK_ERROR: 'Błąd sieci',
+    LOADING_ERROR: 'Błąd ładowania produktów',
+    GENERAL_ERROR: 'Wystąpił błąd'
+};
\ No newline at end of file
